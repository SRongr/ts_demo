{"version":3,"sources":["types/enums.ts","Compontents/ChessComp/index.tsx","Compontents/ChessBoxComp/index.tsx","Compontents/GameComp/index.tsx","App.tsx","index.tsx"],"names":["ChessTypes","GameState","ChessComp","chess","this","props","type","red","className","black","onClick","none","handleClickItem","React","Component","ChessBoxComp","isGameOver","chessComps","chesses","map","index","key","getItemClick","length","defaultProps","GameComp","state","gameState","gaming","nextChess","width","currentLenght","nextChessIsRed","handleWidthChange","handleChessClick","bind","init","console","log","arr","Array","fill","setState","n","preState","getGameState","sum","i","checkHor","getCheckHor","checkVer","getCheckVer","checkSkim","getCheckSkim","checkRes","getCheckRes","alert","redWin","blackWin","equal","App","num","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b8d7c36.chunk.js","sourcesContent":["export enum ChessTypes {\n  none,\n  red,\n  black\n}\n\nexport enum GameState {\n  gaming, // 游戏中\n  redWin, // 红方胜利\n  blackWin, // 黑方胜利\n  equal,\n}","import React from \"react\"\nimport { ChessTypes } from \"../../types/enums\"\nimport './index.less'\ninterface IProps {\n  type: ChessTypes\n  handleClickItem?: () => void\n}\n\n// export function ChessComp({ type, handleClickItem }: IProps) {\n//   let chess = null\n//   if (type === ChessTypes.red) {\n//     chess = <div className=\"chess-red chess\"></div>\n//   }\n//   if (type === ChessTypes.black) {\n//     chess = <div className=\"chess-black chess\"></div>\n//   }\n//   return (\n//     <div className=\"chess-box\" onClick={() => {\n//       if (type === ChessTypes.none && handleClickItem) {\n//         handleClickItem()\n//       }\n//     }}>\n//       {chess}\n//     </div>\n//   )\n// }\n\nexport class ChessComp extends React.Component<IProps, {}> {\n  render () {\n    let chess = null\n    if (this.props.type === ChessTypes.red) {\n      chess = <div className=\"chess-red chess\"></div>\n    }\n    if (this.props.type === ChessTypes.black) {\n      chess = <div className=\"chess-black chess\"></div>\n    }\n    return (\n      <div className=\"chess-box\" onClick={() => {\n        if (this.props.type === ChessTypes.none && this.props.handleClickItem) {\n          this.props.handleClickItem()\n        }\n      }}>\n        {chess}\n      </div>\n    )\n  }\n}","import React from 'react'\nimport { ChessComp } from '../ChessComp'\nimport { ChessTypes } from '../../types/enums'\nimport './index.less'\ninterface IProps {\n  chesses: ChessTypes[]\n  isGameOver?: boolean\n  getItemClick?: (n: number) => void\n}\nconst _defaultProps = { isGameOver: false }\nexport class ChessBoxComp extends React.Component<IProps> {\n  private static defaultProps = _defaultProps\n  render () {\n    const isGameOver = this.props.isGameOver!\n    const chessComps = this.props.chesses.map((type,index)=> {\n      return (\n        <ChessComp type={type} key={index} handleClickItem={() => {\n          if (this.props.getItemClick && !isGameOver) {\n            this.props.getItemClick(index)\n          }\n        }}/>\n      )\n    })\n    return (\n      <div className={`board ${this.props.chesses.length === 400 && 'big'} `}>\n        {chessComps}\n      </div>\n    )\n  }\n}","import React from 'react'\nimport { ChessTypes, GameState} from '../../types/enums'\nimport { ChessBoxComp } from '../ChessBoxComp'\nimport './index.less'\ninterface IState {\n  chesses: ChessTypes[]\n  gameState: GameState\n  nextChess: ChessTypes.red | ChessTypes.black\n  width: number,\n  currentLenght: number\n}\n\nexport class GameComp extends React.Component<{}, IState> {\n  render () {\n    const nextChessIsRed = this.state.nextChess === ChessTypes.red\n    return (\n      <div className=\"game\">\n        <div className=\"button-group\">\n          <button className=\"button\" onClick={() => this.handleWidthChange(10)}>10</button>\n          <button className=\"button\" onClick={() => this.handleWidthChange(20)}>20</button>\n          <button className=\"button\" onClick={() => this.handleWidthChange()}>reStart</button>\n        </div>\n        {/* <title>{this.state.nextChess}</title> */}\n        <div className=\"head\">{ nextChessIsRed ? '红方下棋' : '黑方下棋' }</div>\n        <ChessBoxComp \n          chesses={this.state.chesses} \n          isGameOver={this.state.gameState !== GameState.gaming}\n          getItemClick={this.handleChessClick.bind(this)}>\n          </ChessBoxComp>\n      </div>\n    )\n  }\n  state: IState = {\n    chesses: [],\n    gameState: GameState.gaming,\n    nextChess: ChessTypes.red,\n    width: 10,\n    currentLenght: 0\n  }\n  componentDidMount (){\n    this.init()\n  }\n  // 初始化数据\n  init () {\n    console.log(this.state.width)\n    const arr = new Array<ChessTypes>(this.state.width * this.state.width)\n    arr.fill(ChessTypes.none)\n    this.setState({\n      chesses: arr,\n      nextChess: ChessTypes.red,\n      gameState: GameState.gaming\n    })\n  }\n  /**\n   * 1. 游戏没有结束\n   * 2. 点击的位置没有旗子\n   * 3. 切换颜色\n   * @param n 旗子的index\n   */\n  async handleWidthChange (n?: number) {\n    const width = n || this.state.width\n    await this.setState({\n      width\n    })\n    this.init()\n    console.log(this.state)\n  }\n  handleChessClick (n: number ) {\n    const chesses = [...this.state.chesses]\n    // console.log(this.state.nextChess)\n    // const chesses = this.state.chesses\n    chesses[n] = this.state.nextChess\n    this.setState((preState) => {\n      return {\n        chesses,\n        nextChess: preState.nextChess === ChessTypes.red ?  ChessTypes.black :  ChessTypes.red,\n        gameState: this.getGameState(chesses, n),  // this.setState 是异步函数\n        currentLenght: this.state.currentLenght + 1\n      }\n    })\n  }\n  getCheckHor(chesses: ChessTypes[], index: number): boolean{\n    let sum = 1\n    const width = this.state.width\n    for (let i = 1; i < 5; i++) {\n      if (index % width === 9) {\n        break\n      }\n      if (chesses[index] === chesses[index + i]) {\n        sum += 1\n      } else {\n        break\n      }\n      if ((index + i) % width === 9) {\n        break\n      }\n    }\n    for (let i = 1; i < 5; i ++) {\n      if(index % width === 0 ) {\n        break\n      }\n      if (chesses[index] === chesses[index - i]) {\n        sum += 1\n      } else {\n        break\n      }\n      if ((index - i) % width === 0) {\n        break\n      }\n    }\n    // console.log('sum:',sum)\n    if (sum === 5) {\n      return true\n    } else {\n      return false\n    }\n  }\n  getCheckVer(chesses: ChessTypes[], index: number): boolean{\n    let sum = 1\n    const width = this.state.width\n    for (let i = 1; i < 5; i++) {\n      // if (index % width === 9) {\n      //   break\n      // }\n      if (chesses[index] === chesses[index + i * width]) {\n        sum += 1\n      } else {\n        break\n      }\n    }\n    for (let i = 1; i < 5; i ++) {\n      if (chesses[index] === chesses[index - i * width]) {\n        sum += 1\n      } else {\n        break\n      }\n    }\n    if (sum === 5) {\n      return true\n    } else {\n      return false\n    }\n  }\n  getCheckSkim(chesses: ChessTypes[], index: number): boolean{\n    let sum = 1\n    const width = this.state.width\n    console.log(index)\n    for (let i = 1; i < 5; i++) {\n      // if (index % width === 9) {\n      //   break\n      // }\n      if (chesses[index] === chesses[index + i * width - i]) {\n        sum += 1\n      } else {\n        break\n      }\n    }\n    for (let i = 1; i < 5; i ++) {\n      if (chesses[index] === chesses[index - i * width + i]) {\n        sum += 1\n      } else {\n        break\n      }\n    }\n    if (sum === 5) {\n      return true\n    } else {\n      return false\n    }\n  }\n  getCheckRes(chesses: ChessTypes[], index: number): boolean{\n    let sum = 1\n    const width = this.state.width\n    console.log(index)\n    for (let i = 1; i < 5; i++) {\n      // if (index % width === 9) {\n      //   break\n      // }\n      if (chesses[index] === chesses[index + i * width + i]) {\n        sum += 1\n      } else {\n        break\n      }\n    }\n    for (let i = 1; i < 5; i ++) {\n      if (chesses[index] === chesses[index - i * width - i]) {\n        sum += 1\n      } else {\n        break\n      }\n    }\n    if (sum === 5) {\n      return true\n    } else {\n      return false\n    }\n  }\n  // 获取当前的状态\n  getGameState (chesses: ChessTypes[], index: number):GameState {\n    // 1 判断是否有一方获得胜利\n    // 横向判断\n    let checkHor = this.getCheckHor(chesses, index)\n    // 纵向判断\n    let checkVer = this.getCheckVer(chesses, index)\n    // 右上到左下\n    let checkSkim = this.getCheckSkim(chesses, index)\n    // 捺\n    let checkRes = this.getCheckRes(chesses, index)\n    if (checkHor || checkVer || checkSkim || checkRes) {\n      if (chesses[index] === ChessTypes.red) {\n        alert('红方胜利')\n        return GameState.redWin\n      } else {\n        alert('黑方胜利')\n        return GameState.blackWin\n      }\n    }\n    if (this.state.currentLenght === this.state.width * this.state.width - 1) {\n      alert('平局')\n      return GameState.equal\n    } else {\n      return GameState.gaming\n    }\n  }\n}\n","import React from 'react';\nimport { CountComp } from './Compontents/CountComp';\nimport { ChessComp } from './Compontents//ChessComp/index'\nimport { ChessTypes } from './types/enums'\nimport { ChessBoxComp } from './Compontents/ChessBoxComp';\nimport { GameComp } from './Compontents/GameComp';\ninterface IState {\n  num: number\n}\nexport default class App extends React.Component<{}, IState> {\n  state = {\n    num: 0,\n    isGameOver: false\n  }\n  render () {\n    const chesses = [\n      ChessTypes.none,\n      ChessTypes.red,\n      ChessTypes.black,\n      ChessTypes.none,\n      ChessTypes.red,\n      ChessTypes.black,\n      ChessTypes.none,\n      ChessTypes.red,\n      ChessTypes.black,\n    ]\n    return (\n      <div>\n        <GameComp ></GameComp>\n        {/* <ChessBoxComp chesses={chesses}  getItemClick={(i) => console.log(i)}></ChessBoxComp> */}\n        {/* <ChessComp type={ ChessTypes.none } handleClickItem={() => {\n          console.log('onclick')\n        }}></ChessComp>\n        <ChessComp type={ ChessTypes.red }></ChessComp>\n        <ChessComp type={ ChessTypes.black }></ChessComp> */}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}